name: Sifaka CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  PYTHON_VERSION_DEFAULT: "3.11"

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort autoflake ruff

      - name: Format code
        run: |
          isort --profile black --line-length 100 sifaka tests
          black --line-length 100 sifaka tests
          autoflake --in-place --recursive --remove-all-unused-imports --remove-unused-variables sifaka tests
          ruff check --fix --line-length 100 sifaka tests

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "style: auto-format code"
          branch: ${{ github.head_ref }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: format
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install autoflake

      - name: Check formatting with Black
        run: black --check --line-length 100 sifaka tests

      - name: Check imports with isort
        run: isort --check --profile black --line-length 100 sifaka tests

      - name: Check unused imports with autoflake
        run: autoflake --check --recursive --remove-all-unused-imports --remove-unused-variables sifaka tests

      - name: Lint with Ruff
        run: ruff check --line-length 100 sifaka tests

      - name: Type check with mypy
        run: mypy sifaka

      - name: Lint with flake8
        run: flake8 sifaka tests

  lint-main:
    name: Lint Main
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install autoflake

      - name: Check formatting with Black
        run: black --check --line-length 100 sifaka tests

      - name: Check imports with isort
        run: isort --check --profile black --line-length 100 sifaka tests

      - name: Check unused imports with autoflake
        run: autoflake --check --recursive --remove-all-unused-imports --remove-unused-variables sifaka tests

      - name: Lint with Ruff
        run: ruff check --line-length 100 sifaka tests

      - name: Type check with mypy
        run: mypy sifaka

      - name: Lint with flake8
        run: flake8 sifaka tests

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,all]"

      - name: Run tests with coverage
        run: pytest --cov=sifaka --cov-report=xml --cov-report=term
        continue-on-error: ${{ matrix.python-version != env.PYTHON_VERSION_DEFAULT }}

      - name: Upload coverage report
        if: matrix.python-version == env.PYTHON_VERSION_DEFAULT
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -e ".[dev]"

      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json || true  # Don't fail on vulnerabilities yet

      - name: Security linting with bandit
        run: |
          bandit -r sifaka/ -f json || true  # Don't fail on security issues yet

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for comparison

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-benchmark
          pip install -e ".[dev]"

      - name: Run benchmarks
        run: |
          mkdir -p benchmarks/results
          pytest benchmarks/ --benchmark-json=benchmarks/results/benchmark.json || echo "No benchmarks yet"

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'pull_request'
        with:
          tool: "pytest"
          output-file-path: benchmarks/results/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: "150%"
          fail-on-alert: false
        continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Build package
        run: python -m build

      - name: Store built package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
