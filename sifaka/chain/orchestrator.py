"""
Chain Orchestrator Module

Standard implementation of Sifaka's chain orchestration pattern.

## Overview
This module provides the ChainOrchestrator class which implements the
standard chain orchestration pattern, providing a simplified interface
for creating and running chains with validation and improvement flows.

## Components
1. **ChainOrchestrator**: Main orchestrator class that manages the chain flow
2. **ChainCore**: Core implementation that handles the actual execution
3. **ValidationManager**: Manages validation against rules
4. **PromptManager**: Handles prompt creation and modification
5. **RetryStrategy**: Implements retry logic for validation failures
6. **ResultFormatter**: Formats results and feedback

## Usage Examples
```python
from sifaka.chain import ChainOrchestrator
from sifaka.models import create_openai_chat_provider
from sifaka.rules import create_length_rule, create_toxicity_rule
from sifaka.critics import create_prompt_critic

# Create model provider
model_provider = create_openai_chat_provider(
    model_name="gpt-3.5-turbo",
    api_key="your-api-key"
)

# Create rules
rules = [
    create_length_rule(min_length=10, max_length=1000),
    create_toxicity_rule(threshold=0.7)
]

# Create critic
critic = create_prompt_critic(
    llm_provider=model_provider,
    system_prompt="You are an expert editor that improves text."
)

# Create orchestrator
orchestrator = ChainOrchestrator(
    model=model_provider,
    rules=rules,
    critic=critic,
    max_attempts=3
)

# Run the chain
result = orchestrator.run("Write a short story about a robot learning to paint.")

# Check the result
print(f"Output: {result.output}")
print(f"All rules passed: {all(r.passed for r in result.rule_results)}")
```

## Error Handling
- ValueError: Raised when validation fails after max attempts
- ChainError: Raised when chain execution fails
- ValidationError: Raised when validation fails
- CriticError: Raised when critic refinement fails
- ModelError: Raised when model generation fails

## Configuration
- model: The model provider for text generation
- rules: List of rules to validate outputs against
- critic: Optional critic for improving outputs
- max_attempts: Maximum number of validation attempts
"""

from typing import Generic, List, Optional, TypeVar

from ..critics import CriticCore
from ..generation import Generator
from ..models.base import ModelProvider
from ..rules import Rule
from ..validation import Validator
from .core import ChainCore
from .formatters.result import ResultFormatter
from .managers.prompt import PromptManager
from .managers.validation import ValidationManager
from .result import ChainResult
from .strategies.retry import SimpleRetryStrategy

OutputType = TypeVar("OutputType")


class ChainOrchestrator(Generic[OutputType]):
    """
    Orchestrates the execution of a validation and improvement flow.

    Detailed description of what the class does, including:
    - Provides a standardized implementation of the chain orchestration pattern
    - Creates and configures specialized components
    - Delegates execution to ChainCore
    - Returns standardized ChainResult objects

    Attributes:
        model (ModelProvider): The model provider for text generation
        rules (List[Rule]): List of rules to validate outputs against
        critic (Optional[CriticCore]): Optional critic for improving outputs
        max_attempts (int): Maximum number of validation attempts

    Type parameters:
        OutputType: The type of output generated by the chain

    Example:
        ```python
        from sifaka.chain import ChainOrchestrator
        from sifaka.models import create_openai_chat_provider
        from sifaka.rules import create_length_rule, create_toxicity_rule

        # Create model provider
        model_provider = create_openai_chat_provider(
            model_name="gpt-3.5-turbo",
            api_key="your-api-key"
        )

        # Create rules
        rules = [
            create_length_rule(min_length=10, max_length=1000),
            create_toxicity_rule(threshold=0.7)
        ]

        # Create orchestrator
        orchestrator = ChainOrchestrator(
            model=model_provider,
            rules=rules,
            max_attempts=3
        )

        # Run the chain
        result = orchestrator.run("Write a short story about a robot learning to paint.")

        # Check the result
        print(f"Output: {result.output}")
        print(f"All rules passed: {all(r.passed for r in result.rule_results)}")
        ```
    """

    def __init__(
        self,
        model: ModelProvider,
        rules: List[Rule],
        critic: Optional[CriticCore] = None,
        max_attempts: int = 3,
    ):
        """
        Initialize a ChainOrchestrator instance.

        Detailed description of what the method does, including:
        - Creates and configures specialized components
        - Sets up the core chain with all components
        - Initializes validation and retry logic

        Args:
            model (ModelProvider): The model provider to use
            rules (List[Rule]): The rules to validate outputs against
            critic (Optional[CriticCore]): Optional critic for improving outputs
            max_attempts (int): Maximum number of attempts

        Raises:
            ValueError: When validation fails after max attempts
            ChainError: When chain execution fails
        """
        # Create components
        validation_manager = ValidationManager[OutputType](rules)
        prompt_manager = PromptManager()
        retry_strategy = SimpleRetryStrategy[OutputType](max_attempts=max_attempts)
        result_formatter = ResultFormatter[OutputType]()

        # Create core chain
        self._core = ChainCore[OutputType](
            model=model,
            validation_manager=validation_manager,
            prompt_manager=prompt_manager,
            retry_strategy=retry_strategy,
            result_formatter=result_formatter,
            critic=critic,
        )

    def run(self, prompt: str) -> ChainResult[OutputType]:
        """
        Run the prompt through the orchestration flow.

        Detailed description of what the method does, including:
        - Processes the prompt through the chain
        - Validates the output against rules
        - Improves the output if validation fails
        - Returns a standardized result

        Args:
            prompt (str): The prompt to process

        Returns:
            ChainResult[OutputType]: The result of running the chain

        Raises:
            ValueError: When validation fails after max attempts
            ChainError: When chain execution fails
            ValidationError: When validation fails
            CriticError: When critic refinement fails
            ModelError: When model generation fails

        Example:
            ```python
            # Run the chain
            result = orchestrator.run("Write a short story about a robot learning to paint.")

            # Check the result
            print(f"Output: {result.output}")
            print(f"All rules passed: {all(r.passed for r in result.rule_results)}")
            ```
        """
        return self._core.run(prompt)
