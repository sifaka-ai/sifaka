"""
Retry Strategy Module

Implements retry strategies for Sifaka's chain system.

## Overview
This module provides retry strategy implementations for handling validation failures
and improving outputs through multiple attempts. It includes both simple retry and
exponential backoff strategies.

## Components
1. **RetryStrategy**: Abstract base class for retry strategies
2. **SimpleRetryStrategy**: Basic retry strategy with fixed attempts
3. **BackoffRetryStrategy**: Advanced strategy with exponential backoff

## Usage Examples
```python
from sifaka.chain.strategies.retry import SimpleRetryStrategy, BackoffRetryStrategy
from sifaka.chain.managers.validation import ValidationManager
from sifaka.chain.managers.prompt import PromptManager
from sifaka.chain.formatters.result import ResultFormatter
from sifaka.critics import create_prompt_critic

# Create components
validation_manager = ValidationManager(rules=[...])
prompt_manager = PromptManager()
result_formatter = ResultFormatter()
critic = create_prompt_critic(...)

# Create simple retry strategy
simple_strategy = SimpleRetryStrategy(max_attempts=3)
result = simple_strategy.run(
    prompt="Write a story",
    generator=generator,
    validation_manager=validation_manager,
    prompt_manager=prompt_manager,
    result_formatter=result_formatter,
    critic=critic
)

# Create backoff retry strategy
backoff_strategy = BackoffRetryStrategy(
    max_attempts=5,
    initial_backoff=1.0,
    backoff_factor=2.0,
    max_backoff=60.0
)
result = backoff_strategy.run(
    prompt="Write a story",
    generator=generator,
    validation_manager=validation_manager,
    prompt_manager=prompt_manager,
    result_formatter=result_formatter,
    critic=critic
)
```

## Error Handling
- ValueError: Raised when validation fails after max attempts
- RuntimeError: Raised when operation fails after all retries
- Exception: Base class for all other errors that may occur

## Configuration
- max_attempts: Maximum number of retry attempts
- initial_backoff: Initial backoff time in seconds (BackoffRetryStrategy only)
- backoff_factor: Factor to multiply backoff by each attempt (BackoffRetryStrategy only)
- max_backoff: Maximum backoff time in seconds (BackoffRetryStrategy only)
"""

import time
from abc import ABC, abstractmethod
from typing import Any, Dict, Generic, Optional, TypeVar

from ..interfaces.strategy import RetryStrategyProtocol
from ...critics import CriticCore
from ...generation import Generator
from ...models.base import ModelProvider
from ...validation import ValidationResult
from ..formatters.result import ResultFormatter
from ..managers.prompt import PromptManager
from ..managers.validation import ValidationManager
from ..result import ChainResult
from ...utils.logging import get_logger

logger = get_logger(__name__)

OutputType = TypeVar("OutputType")


class RetryStrategy(RetryStrategyProtocol, Generic[OutputType], ABC):
    """
    Abstract base class for retry strategies.

    Detailed description of what the class does, including:
    - Provides base implementation for retry strategies
    - Defines interface and common functionality
    - Handles retry logic and error management
    - Supports different retry behaviors

    Type parameters:
        OutputType: The type of output generated by the chain

    Example:
        ```python
        class CustomRetryStrategy(RetryStrategy[str]):
            def __init__(self, max_attempts: int = 3):
                self._max_attempts = max_attempts

            def run(
                self,
                prompt: str,
                generator: Generator[str],
                validation_manager: ValidationManager[str],
                prompt_manager: PromptManager,
                result_formatter: ResultFormatter[str],
                critic: Optional[CriticCore] = None,
            ) -> ChainResult[str]:
                # Custom retry implementation
                pass
        ```
    """

    @abstractmethod
    def run(
        self,
        prompt: str,
        generator: Generator[OutputType],
        validation_manager: ValidationManager[OutputType],
        prompt_manager: PromptManager,
        result_formatter: ResultFormatter[OutputType],
        critic: Optional[CriticCore] = None,
    ) -> ChainResult[OutputType]:
        """
        Run with retries.

        Detailed description of what the method does, including:
        - Implements core retry logic for processing prompts
        - Coordinates interaction between components
        - Handles validation and improvement
        - Manages retry attempts and conditions

        Args:
            prompt: The prompt to process
            generator: The generator to use
            validation_manager: The validation manager to use
            prompt_manager: The prompt manager to use
            result_formatter: The result formatter to use
            critic: Optional critic to use

        Returns:
            The chain result with output and validation details

        Raises:
            ValueError: If validation fails after max attempts

        Example:
            ```python
            # Run with retries
            result = strategy.run(
                prompt="Write a story",
                generator=generator,
                validation_manager=validation_manager,
                prompt_manager=prompt_manager,
                result_formatter=result_formatter,
                critic=critic
            )
            print(f"Chain result: {result}")
            ```
        """
        pass

    def execute(self, operation: Any, *args: Any, **kwargs: Any) -> Any:
        """
        Execute an operation with retries.

        Detailed description of what the method does, including:
        - Executes an operation with retry logic
        - Handles operation failures and retries
        - Manages retry attempts and conditions
        - Returns operation result or raises error

        Args:
            operation: The operation to execute
            *args: Positional arguments for the operation
            **kwargs: Keyword arguments for the operation

        Returns:
            The result of the operation

        Raises:
            RuntimeError: If the operation fails after all retries

        Example:
            ```python
            # Execute an operation with retries
            try:
                result = strategy.execute(
                    operation=some_function,
                    arg1="value1",
                    arg2="value2"
                )
                print(f"Operation result: {result}")
            except RuntimeError as e:
                print(f"Operation failed: {e}")
            ```
        """
        attempt = 0
        while attempt < self._max_attempts:
            try:
                result = operation(*args, **kwargs)
                if not self.should_retry(attempt, result):
                    return result
            except Exception as e:
                if not self.should_retry(attempt, None, e):
                    raise RuntimeError(f"Operation failed after {attempt + 1} attempts") from e

            attempt += 1

        raise RuntimeError(f"Operation failed after {self._max_attempts} attempts")

    def should_retry(self, attempt: int, result: Any, error: Optional[Exception] = None) -> bool:
        """
        Check if an operation should be retried.

        Detailed description of what the method does, including:
        - Determines whether an operation should be retried
        - Evaluates retry conditions based on attempt, result, and error
        - Implements retry decision logic
        - Returns boolean indicating retry decision

        Args:
            attempt: The current attempt number
            result: The result of the operation
            error: The error that occurred, if any

        Returns:
            True if the operation should be retried, False otherwise

        Example:
            ```python
            # Check if operation should be retried
            should_retry = strategy.should_retry(
                attempt=1,
                result=None,
                error=ValueError("Invalid input")
            )
            print(f"Should retry: {should_retry}")
            ```
        """
        # If we've reached the maximum number of attempts, don't retry
        if attempt >= self._max_attempts - 1:
            return False

        # If there was an error, retry
        if error is not None:
            return True

        # If the result is None, retry
        if result is None:
            return True

        # Otherwise, don't retry
        return False


class SimpleRetryStrategy(RetryStrategy[OutputType]):
    """
    Simple retry strategy with fixed number of attempts.

    Detailed description of what the class does, including:
    - Implements basic retry strategy with fixed attempts
    - Handles validation failures and improvements
    - Manages retry attempts and conditions
    - Returns chain result with output and validation

    Type parameters:
        OutputType: The type of output generated by the chain

    Example:
        ```python
        # Create and use simple retry strategy
        strategy = SimpleRetryStrategy(max_attempts=3)
        result = strategy.run(
            prompt="Write a story",
            generator=generator,
            validation_manager=validation_manager,
            prompt_manager=prompt_manager,
            result_formatter=result_formatter,
            critic=critic
        )
        print(f"Chain result: {result}")
        ```
    """

    def __init__(self, max_attempts: int = 3):
        """
        Initialize the simple retry strategy.

        Detailed description of what the method does, including:
        - Sets up retry strategy with max attempts
        - Initializes retry state and conditions
        - Configures retry behavior

        Args:
            max_attempts: Maximum number of retry attempts

        Example:
            ```python
            # Initialize simple retry strategy
            strategy = SimpleRetryStrategy(max_attempts=3)
            ```
        """
        self._max_attempts = max_attempts

    @property
    def max_attempts(self) -> int:
        """
        Get the maximum number of retry attempts.

        Detailed description of what the method does, including:
        - Returns the maximum number of retry attempts
        - Provides access to retry configuration
        - Used for retry decision making

        Returns:
            The maximum number of retry attempts

        Example:
            ```python
            # Get max attempts
            max_attempts = strategy.max_attempts
            print(f"Max attempts: {max_attempts}")
            ```
        """
        return self._max_attempts

    def run(
        self,
        prompt: str,
        generator: Generator[OutputType],
        validation_manager: ValidationManager[OutputType],
        prompt_manager: PromptManager,
        result_formatter: ResultFormatter[OutputType],
        critic: Optional[CriticCore] = None,
    ) -> ChainResult[OutputType]:
        """
        Run with simple retry strategy.

        Detailed description of what the method does, including:
        - Implements simple retry logic for processing prompts
        - Handles validation failures and improvements
        - Manages retry attempts and conditions
        - Returns chain result with output and validation

        Args:
            prompt: The prompt to process
            generator: The generator to use
            validation_manager: The validation manager to use
            prompt_manager: The prompt manager to use
            result_formatter: The result formatter to use
            critic: Optional critic to use

        Returns:
            The chain result with output and validation details

        Raises:
            ValueError: If validation fails after max attempts

        Example:
            ```python
            # Run with simple retry strategy
            result = strategy.run(
                prompt="Write a story",
                generator=generator,
                validation_manager=validation_manager,
                prompt_manager=prompt_manager,
                result_formatter=result_formatter,
                critic=critic
            )
            print(f"Chain result: {result}")
            ```
        """
        attempt = 0
        while attempt < self._max_attempts:
            try:
                # Generate output
                output = generator.generate(prompt)

                # Validate output
                validation_result = validation_manager.validate(output)
                if validation_result.is_valid:
                    return ChainResult(
                        output=output,
                        validation_result=validation_result,
                        attempts=attempt + 1,
                    )

                # Improve output if critic is available
                if critic is not None:
                    feedback = critic.get_feedback(prompt, output)
                    output = critic.improve(prompt, output, feedback)

                attempt += 1
            except Exception as e:
                logger.error(f"Error in attempt {attempt + 1}: {e}")
                attempt += 1

        raise ValueError(f"Validation failed after {self._max_attempts} attempts")


class BackoffRetryStrategy(RetryStrategy[OutputType]):
    """
    Retry strategy with exponential backoff.

    Detailed description of what the class does, including:
    - Implements retry strategy with exponential backoff
    - Handles validation failures and improvements
    - Manages retry attempts and backoff timing
    - Returns chain result with output and validation

    Type parameters:
        OutputType: The type of output generated by the chain

    Example:
        ```python
        # Create and use backoff retry strategy
        strategy = BackoffRetryStrategy(
            max_attempts=5,
            initial_backoff=1.0,
            backoff_factor=2.0,
            max_backoff=60.0
        )
        result = strategy.run(
            prompt="Write a story",
            generator=generator,
            validation_manager=validation_manager,
            prompt_manager=prompt_manager,
            result_formatter=result_formatter,
            critic=critic
        )
        print(f"Chain result: {result}")
        ```
    """

    def __init__(
        self,
        max_attempts: int = 3,
        initial_backoff: float = 1.0,
        backoff_factor: float = 2.0,
        max_backoff: float = 60.0,
    ):
        """
        Initialize the backoff retry strategy.

        Detailed description of what the method does, including:
        - Sets up retry strategy with backoff parameters
        - Initializes retry state and conditions
        - Configures backoff behavior

        Args:
            max_attempts: Maximum number of retry attempts
            initial_backoff: Initial backoff time in seconds
            backoff_factor: Factor to multiply backoff by each attempt
            max_backoff: Maximum backoff time in seconds

        Example:
            ```python
            # Initialize backoff retry strategy
            strategy = BackoffRetryStrategy(
                max_attempts=5,
                initial_backoff=1.0,
                backoff_factor=2.0,
                max_backoff=60.0
            )
            ```
        """
        self._max_attempts = max_attempts
        self._initial_backoff = initial_backoff
        self._backoff_factor = backoff_factor
        self._max_backoff = max_backoff

    @property
    def max_attempts(self) -> int:
        """
        Get the maximum number of retry attempts.

        Detailed description of what the method does, including:
        - Returns the maximum number of retry attempts
        - Provides access to retry configuration
        - Used for retry decision making

        Returns:
            The maximum number of retry attempts

        Example:
            ```python
            # Get max attempts
            max_attempts = strategy.max_attempts
            print(f"Max attempts: {max_attempts}")
            ```
        """
        return self._max_attempts

    def run(
        self,
        prompt: str,
        generator: Generator[OutputType],
        validation_manager: ValidationManager[OutputType],
        prompt_manager: PromptManager,
        result_formatter: ResultFormatter[OutputType],
        critic: Optional[CriticCore] = None,
    ) -> ChainResult[OutputType]:
        """
        Run with backoff retry strategy.

        Detailed description of what the method does, including:
        - Implements retry logic with exponential backoff
        - Handles validation failures and improvements
        - Manages retry attempts and backoff timing
        - Returns chain result with output and validation

        Args:
            prompt: The prompt to process
            generator: The generator to use
            validation_manager: The validation manager to use
            prompt_manager: The prompt manager to use
            result_formatter: The result formatter to use
            critic: Optional critic to use

        Returns:
            The chain result with output and validation details

        Raises:
            ValueError: If validation fails after max attempts

        Example:
            ```python
            # Run with backoff retry strategy
            result = strategy.run(
                prompt="Write a story",
                generator=generator,
                validation_manager=validation_manager,
                prompt_manager=prompt_manager,
                result_formatter=result_formatter,
                critic=critic
            )
            print(f"Chain result: {result}")
            ```
        """
        attempt = 0
        backoff = self._initial_backoff

        while attempt < self._max_attempts:
            try:
                # Generate output
                output = generator.generate(prompt)

                # Validate output
                validation_result = validation_manager.validate(output)
                if validation_result.is_valid:
                    return ChainResult(
                        output=output,
                        validation_result=validation_result,
                        attempts=attempt + 1,
                    )

                # Improve output if critic is available
                if critic is not None:
                    feedback = critic.get_feedback(prompt, output)
                    output = critic.improve(prompt, output, feedback)

                # Calculate next backoff
                backoff = min(backoff * self._backoff_factor, self._max_backoff)
                time.sleep(backoff)

                attempt += 1
            except Exception as e:
                logger.error(f"Error in attempt {attempt + 1}: {e}")
                backoff = min(backoff * self._backoff_factor, self._max_backoff)
                time.sleep(backoff)
                attempt += 1

        raise ValueError(f"Validation failed after {self._max_attempts} attempts")
