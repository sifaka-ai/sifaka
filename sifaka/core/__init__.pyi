"""Type stubs for sifaka.core module.

This file provides type hints for core Sifaka components.
"""

from typing import Any, Dict, List, Optional, Type, Union
from datetime import datetime

# Core models
from sifaka.core.models.generation import Generation
from sifaka.core.models.validation import ValidationResult
from sifaka.core.models.critique import CritiqueResult
from sifaka.core.models.tool_call import ToolCall

# Main thought class
class SifakaThought:
    def __init__(self, prompt: str, id: Optional[str] = None) -> None: ...
    
    # Properties
    @property
    def prompt(self) -> str: ...
    @property
    def id(self) -> str: ...
    @property
    def created_at(self) -> datetime: ...
    @property
    def current_iteration(self) -> int: ...
    
    # Core operations
    def add_generation(
        self,
        text: str,
        model: str,
        pydantic_result: Any,
        conversation_history: Optional[List[Union[Dict, str]]] = None,
        cost: Optional[float] = None,
        usage: Optional[Dict] = None
    ) -> None: ...
    
    def add_validation(
        self,
        validator: str,
        passed: bool,
        details: Dict[str, Any]
    ) -> None: ...
    
    def add_critique(
        self,
        critic: str,
        feedback: str,
        suggestions: List[str],
        confidence: Optional[float] = None,
        reasoning: Optional[str] = None,
        needs_improvement: bool = True,
        **metadata: Any
    ) -> None: ...
    
    def add_tool_call(
        self,
        tool_name: str,
        args: Dict[str, Any],
        result: Any,
        execution_time: float
    ) -> None: ...
    
    # Analysis methods
    def get_summary(self) -> Dict[str, Any]: ...
    def get_memory_usage(self) -> Dict[str, Any]: ...
    def get_current_iteration_validations(self) -> List[ValidationResult]: ...
    def get_current_iteration_critiques(self) -> List[CritiqueResult]: ...
    def cleanup_history(self, keep_last_n: int = 10) -> Dict[str, int]: ...
    
    # Text access
    def get_latest_text(self) -> str: ...
    def get_text_at_iteration(self, iteration: int) -> Optional[str]: ...

# Container and registry
class SifakaContainer:
    def __init__(self) -> None: ...
    def get_node(self, node_name: str) -> Type[Any]: ...
    def get_node_instance(self, node_name: str) -> Any: ...
    def register_node(self, name: str, node_class: Type[Any]) -> None: ...
    def register_plugin(self, name: str, plugin: Any) -> None: ...
    def get_plugin(self, name: str) -> Any: ...
    def cleanup(self) -> None: ...

class SifakaRegistry:
    def __init__(self) -> None: ...
    def register_critic(self, name: str, critic: Any, metadata: Optional[Dict[str, Any]] = None) -> None: ...
    def register_validator(self, name: str, validator: Any, metadata: Optional[Dict[str, Any]] = None) -> None: ...
    def get_critic(self, name: str) -> Any: ...
    def get_validator(self, name: str) -> Any: ...
    def list_plugins(self, plugin_type: Optional[str] = None) -> List[Any]: ...

# Global functions
def get_container() -> SifakaContainer: ...
def get_registry() -> SifakaRegistry: ...
def reset_container() -> None: ...
def reset_registry() -> None: ...
