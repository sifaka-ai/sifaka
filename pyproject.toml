[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sifaka"
version = "0.4.0"
description = "Sifaka - PydanticAI-native AI validation, improvement, and evaluation framework"
authors = [{name = "Evan Volgas", email = "evan.volgas@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9,<3.13"
keywords = ["ai", "llm", "validation", "guardrails", "text-generation", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies (minimal required for basic functionality)
dependencies = [
    "pydantic>=2.11.3",
    "pydantic-ai[mcp]>=0.2.0",
    "typing-extensions>=4.10.0",
    "python-dotenv>=1.0.1",
    "requests>=2.31.0",
    "httpx>=0.28.1",
    "aiofiles>=23.0.0",
    "tenacity>=8.2.3",
    "websockets>=15.0.1",
    "jsonschema>=4.23.0",
]

[project.optional-dependencies]
# Model providers
openai = [
    "openai>=1.82.0",
    "tiktoken>=0.9.0",
]
anthropic = [
    "anthropic>=0.50.0",
]
ollama = [
    "ollama>=0.1.0",
]
gemini = [
    "google-generativeai>=0.8.5",
]

# Storage backends
redis = [
    "redis>=5.0.0",
]

# MCP (Model Context Protocol) support
mcp = [
    "websockets>=11.0.0",
    "jsonschema>=4.17.0",
]

# ML and classification (all classifiers now use transformers)
# Default: PyTorch backend (most common and well-supported)
classifiers = [
    "transformers>=4.52.0",  # Hugging Face transformers for all ML classifiers
    "torch>=2.0.0",  # PyTorch backend for transformers
    "sentencepiece>=0.2.0",  # Tokenization for transformers
    "accelerate>=0.20.0",  # Faster model loading and inference
]

# Alternative backends for transformers (choose one)
classifiers-tf = [
    "transformers>=4.52.0",  # Hugging Face transformers
    "tensorflow>=2.15.0",  # TensorFlow backend for transformers
    "sentencepiece>=0.2.0",  # Tokenization for transformers
]

classifiers-jax = [
    "transformers>=4.52.0",  # Hugging Face transformers
    "jax>=0.4.0",  # JAX backend for transformers
    "flax>=0.8.0",  # Flax for JAX models
    "sentencepiece>=0.2.0",  # Tokenization for transformers
]

# Validation and guardrails (removed due to griffe version conflicts)
# guardrails = [
#     "guardrails-ai==0.1.8",  # Conflicts with PydanticAI griffe requirements
# ]

# Performance and utilities
performance = [
    "numpy>=1.26.0",
    "psutil>=5.9.5",
    "tqdm>=4.66.2",
]

# Web search tools (PydanticAI common tools)
tools = [
    "pydantic-ai-slim[duckduckgo]>=0.2.0",  # DuckDuckGo search via PydanticAI common tools
]

# Development tools
dev = [
    "pytest>=8.0.2",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=24.2.0",
    "isort>=5.13.2",
    "mypy>=1.9.0",
    "ruff>=0.3.0",
    "flake8>=5.0.0",
    "autoflake>=2.0.0",
    "typer>=0.9.0",
    "pre-commit>=3.0.0",
    "ipython>=8.0.0",
    # Type stubs
    "types-aiofiles>=23.0.0",
    "types-jsonschema>=4.21.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    "types-redis>=4.5.0",
    # Include all classifier dependencies for development
    "transformers>=4.52.0",
    "torch>=2.0.0",
    "sentencepiece>=0.2.0",
    "accelerate>=0.20.0",
    # Include tools for development
    "pydantic-ai-slim[duckduckgo]>=0.2.0",
]

# Convenience groups
models = [
    "sifaka[openai,anthropic,ollama,gemini]",
]
retrievers = [
    "sifaka[redis]",
]
# Default: PyTorch backend
all = [
    "sifaka[models,retrievers,classifiers,performance,mcp,tools]",
]
# Alternative backends
all-tf = [
    "sifaka[models,retrievers,classifiers-tf,performance,mcp,tools]",
]
all-jax = [
    "sifaka[models,retrievers,classifiers-jax,performance,mcp,tools]",
]
full = [
    "sifaka[all,dev]",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["sifaka*"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.ruff]
line-length = 100
target-version = "py39"
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "tests",
    "examples",
    "demos",
    "benchmarks",
    "tools",
]

[tool.ruff.lint]
select = ["E", "F", "B", "I"]
ignore = ["E203", "B904"]

[tool.ruff.lint.isort]
known-first-party = ["sifaka"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=sifaka",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["sifaka"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/demos/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
disallow_subclassing_any = true
disallow_any_generics = true
exclude = ["demos/", "benchmarks/", "tools/"]

# Module-specific configurations
[[tool.mypy.overrides]]
module = [
    "redis.*",
    "sklearn.*",
    "guardrails.*",
    "anthropic.*",
    "openai.*",
    "numpy.*",
    "pandas.*",
    "websockets.*",
    "tiktoken.*",
    "ollama.*",
    "traitlets.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "sifaka.core.registry",
    "sifaka.core.initialize_registry",
    "sifaka.classifiers.errors",
]
follow_imports = "skip"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
]
