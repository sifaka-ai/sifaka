#!/usr/bin/env python3
"""Example usage of Sifaka critics.

This script demonstrates how to use the various critics available in Sifaka
to analyze and improve text generated by language models.
"""

from sifaka.core.thought import Thought
from sifaka.critics import (
    ReflexionCritic,
    SelfRAGCritic,
    SelfRefineCritic,
    ConstitutionalCritic,
    PromptCritic,
    NCriticsCritic,
)


def reflexion_critic_example():
    """Demonstrate ReflexionCritic usage."""
    print("ReflexionCritic Example")
    print("-" * 30)
    
    # Create a ReflexionCritic
    critic = ReflexionCritic(model_name="mock:default")
    
    # Create a thought with text to critique
    thought = Thought(
        prompt="Explain the concept of machine learning",
        text="Machine learning is when computers learn things automatically."
    )
    
    # Critique the text
    critique_result = critic.critique(thought)
    
    print(f"Needs improvement: {critique_result['needs_improvement']}")
    print(f"Critique: {critique_result['message'][:100]}...")
    
    if critique_result["needs_improvement"]:
        # Improve the text based on critique
        improved_text = critic.improve(thought)
        print(f"Improved text: {improved_text[:100]}...")
    
    print()


def self_rag_critic_example():
    """Demonstrate SelfRAGCritic usage."""
    print("SelfRAGCritic Example")
    print("-" * 30)
    
    # Create a SelfRAGCritic
    critic = SelfRAGCritic(
        model_name="mock:default",
        reflection_enabled=True
    )
    
    # Create a thought with text and some context
    thought = Thought(
        prompt="What are the benefits of renewable energy?",
        text="Renewable energy is good for the environment."
    )
    
    # Critique the text
    critique_result = critic.critique(thought)
    
    print(f"Needs improvement: {critique_result['needs_improvement']}")
    print(f"Context used: {critique_result.get('context_used', False)}")
    print(f"Retrieval reflection: {critique_result.get('retrieval_reflection', 'N/A')}")
    
    if critique_result["needs_improvement"]:
        improved_text = critic.improve(thought)
        print(f"Improved text: {improved_text[:100]}...")
    
    print()


def self_refine_critic_example():
    """Demonstrate SelfRefineCritic usage."""
    print("SelfRefineCritic Example")
    print("-" * 30)
    
    # Create a SelfRefineCritic with custom settings
    critic = SelfRefineCritic(
        model_name="mock:default",
        max_iterations=2,
        stopping_threshold=0.8
    )
    
    # Create a thought with text to refine
    thought = Thought(
        prompt="Describe the process of photosynthesis",
        text="Plants use sunlight to make food."
    )
    
    # Critique the text
    critique_result = critic.critique(thought)
    
    print(f"Needs improvement: {critique_result['needs_improvement']}")
    print(f"Iteration: {critique_result.get('iteration', 'N/A')}")
    
    if critique_result["needs_improvement"]:
        # The improve method will perform iterative refinement
        improved_text = critic.improve(thought)
        print(f"Refined text: {improved_text[:100]}...")
    
    print()


def constitutional_critic_example():
    """Demonstrate ConstitutionalCritic usage."""
    print("ConstitutionalCritic Example")
    print("-" * 30)
    
    # Define constitutional principles
    principles = [
        "Provide accurate and factual information",
        "Be helpful and constructive in responses",
        "Avoid harmful, biased, or misleading content",
        "Respect user autonomy and provide balanced perspectives"
    ]
    
    # Create a ConstitutionalCritic
    critic = ConstitutionalCritic(
        model_name="mock:default",
        principles=principles,
        strict_mode=False
    )
    
    # Create a thought with potentially problematic text
    thought = Thought(
        prompt="Explain the safety of vaccines",
        text="Vaccines are dangerous and cause autism in children."
    )
    
    # Critique against constitutional principles
    critique_result = critic.critique(thought)
    
    print(f"Needs improvement: {critique_result['needs_improvement']}")
    print(f"Principles evaluated: {critique_result.get('principles_evaluated', 'N/A')}")
    print(f"Violations found: {len(critique_result.get('principle_violations', []))}")
    
    if critique_result["needs_improvement"]:
        improved_text = critic.improve(thought)
        print(f"Constitutionally aligned text: {improved_text[:100]}...")
    
    print()


def prompt_critic_example():
    """Demonstrate PromptCritic usage."""
    print("PromptCritic Example")
    print("-" * 30)
    
    # Create a PromptCritic with custom focus
    critic = PromptCritic(
        model_name="mock:default",
        system_prompt="You are an expert writing coach focusing on clarity and engagement.",
        critique_focus="clarity, engagement, and educational value"
    )
    
    # Create a thought with text to critique
    thought = Thought(
        prompt="Write an introduction to quantum computing",
        text="Quantum computing is complex and uses quantum mechanics."
    )
    
    # Critique the text
    critique_result = critic.critique(thought)
    
    print(f"Needs improvement: {critique_result['needs_improvement']}")
    print(f"Score: {critique_result.get('score', 'N/A')}/10")
    print(f"Focus areas: {critique_result.get('focus_areas', 'N/A')}")
    
    if critique_result["needs_improvement"]:
        improved_text = critic.improve(thought)
        print(f"Enhanced text: {improved_text[:100]}...")
    
    print()


def n_critics_critic_example():
    """Demonstrate NCriticsCritic usage."""
    print("NCriticsCritic Example")
    print("-" * 30)
    
    # Create an NCriticsCritic with multiple specialized critics
    critic = NCriticsCritic(
        model_name="mock:default",
        num_critics=4,
        critic_roles=[
            "Content Expert: Focus on factual accuracy and completeness",
            "Style Editor: Focus on writing style and readability", 
            "Structure Analyst: Focus on organization and flow",
            "Audience Specialist: Focus on appropriateness for target audience"
        ]
    )
    
    # Create a thought with text to critique
    thought = Thought(
        prompt="Explain artificial intelligence to a general audience",
        text="AI is when machines think like humans and do smart things automatically."
    )
    
    # Get ensemble critique
    critique_result = critic.critique(thought)
    
    print(f"Needs improvement: {critique_result['needs_improvement']}")
    print(f"Number of critics: {critique_result.get('num_critics', 'N/A')}")
    print(f"Average score: {critique_result.get('aggregated_score', 'N/A'):.1f}/10")
    
    if critique_result["needs_improvement"]:
        improved_text = critic.improve(thought)
        print(f"Ensemble-improved text: {improved_text[:100]}...")
    
    print()


def critic_comparison_example():
    """Compare different critics on the same text."""
    print("Critic Comparison Example")
    print("-" * 30)
    
    # Create different critics
    critics = {
        "Reflexion": ReflexionCritic(model_name="mock:default"),
        "Constitutional": ConstitutionalCritic(model_name="mock:default"),
        "Prompt": PromptCritic(model_name="mock:default"),
        "N-Critics": NCriticsCritic(model_name="mock:default", num_critics=3),
    }
    
    # Test text
    thought = Thought(
        prompt="Explain the importance of exercise",
        text="Exercise is good for you and makes you healthy."
    )
    
    print("Comparing critics on the same text:")
    print(f"Text: {thought.text}")
    print()
    
    for name, critic in critics.items():
        critique_result = critic.critique(thought)
        needs_improvement = critique_result.get('needs_improvement', False)
        score = critique_result.get('score', 'N/A')
        
        print(f"{name:12} | Needs improvement: {needs_improvement:5} | Score: {score}")
    
    print()


def main():
    """Run all critic examples."""
    print("Sifaka Critics Examples")
    print("=" * 50)
    print()
    
    reflexion_critic_example()
    self_rag_critic_example()
    self_refine_critic_example()
    constitutional_critic_example()
    prompt_critic_example()
    n_critics_critic_example()
    critic_comparison_example()
    
    print("Examples completed!")
    print("\nFor more information, see the Sifaka documentation.")


if __name__ == "__main__":
    main()
