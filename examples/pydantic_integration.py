"""
Example of using Sifaka with Pydantic models and LangChain for structured output validation and pattern analysis.

This example demonstrates:
1. Using Pydantic for structured data validation
   - Defining a MovieReview model with field constraints
   - Validating LLM output against the model schema

2. Integrating with LangChain
   - Creating a structured prompt template
   - Using PydanticOutputParser for response formatting
   - Building a chain with RunnablePassthrough

3. Pattern Analysis with Sifaka
   - Using SymmetryRule for text structure analysis
   - Using RepetitionRule for pattern detection
   - Combining multiple validation rules

4. Error Handling and Logging
   - Structured logging of validation results
   - Proper exception handling for LLM and validation errors
   - Detailed pattern analysis reporting

Usage:
    python pydantic_integration.py

Requirements:
    - Sifaka library with pattern rules support
    - Pydantic for data validation
    - LangChain for LLM integration
    - Python dotenv for environment management
"""

import logging
import os
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field, ConfigDict
from dotenv import load_dotenv
from langchain.prompts import PromptTemplate
from langchain.output_parsers import PydanticOutputParser
from langchain_core.runnables import RunnablePassthrough

from sifaka.integrations.langchain import ChainConfig, wrap_chain
from sifaka.models import AnthropicProvider
from sifaka.models.base import ModelConfig
from sifaka.rules import SymmetryRule, RepetitionRule
from sifaka.rules.base import RuleConfig, RulePriority

# Configure logging with a consistent format
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class MovieReview(BaseModel):
    """
    A structured movie review model with validation constraints.

    This Pydantic model defines the expected structure and validation rules
    for movie reviews generated by the LLM. Each field has specific constraints
    to ensure data quality and consistency.

    Attributes:
        title (str): The movie's title
        year (int): Release year (1900-2024)
        rating (float): Movie rating (0.0-10.0)
        genre (List[str]): List of movie genres
        strengths (List[str]): List of movie's strong points
        weaknesses (List[str]): List of movie's weak points
        summary (str): Brief movie summary (50-500 chars)
        recommended (bool): Overall recommendation
    """

    model_config = ConfigDict(str_strip_whitespace=True)

    title: str = Field(..., description="The title of the movie")
    year: int = Field(
        ...,
        description="The year the movie was released",
        ge=1900,
        le=2024,
        examples=[2024, 1999, 2010],
    )
    rating: float = Field(
        ..., description="Rating from 0.0 to 10.0", ge=0.0, le=10.0, examples=[8.5, 9.0, 7.2]
    )
    genre: List[str] = Field(
        ...,
        description="List of movie genres",
        min_items=1,
        examples=[["Action", "Sci-Fi"], ["Drama", "Romance"]],
    )
    strengths: List[str] = Field(..., description="List of movie strengths", min_items=1)
    weaknesses: List[str] = Field(..., description="List of movie weaknesses", min_items=1)
    summary: str = Field(
        ...,
        description="Brief summary of the movie",
        min_length=50,
        max_length=500,
        examples=[
            "A groundbreaking sci-fi film that explores the nature of reality...",
            "An emotional drama about redemption and hope...",
        ],
    )
    recommended: bool = Field(
        ..., description="Whether the movie is recommended", examples=[True, False]
    )


def analyze_text(text: str) -> Dict[str, Any]:
    """
    Analyze text using Sifaka's pattern detection rules.

    This function applies both symmetry and repetition analysis to the input text,
    providing insights into the text's structural patterns and repetitive elements.

    Args:
        text (str): The text to analyze, typically a movie review summary

    Returns:
        Dict[str, Any]: Analysis results containing:
            - symmetry: Symmetry analysis results including score and patterns
            - repetition: Repetition analysis results including found patterns

    Example:
        >>> results = analyze_text("A man, a plan, a canal: Panama!")
        >>> print(results["symmetry"]["metadata"]["symmetry_score"])
        0.59
    """
    results = {}

    # Configure symmetry detection rule
    # Lower threshold (0.4) used for movie reviews as they're typically narrative
    symmetry_rule = SymmetryRule(
        name="symmetry_check",
        description="Checks for text symmetry patterns",
        config=RuleConfig(
            priority=RulePriority.MEDIUM,
            metadata={
                "mirror_mode": "both",  # Check both horizontal and vertical symmetry
                "symmetry_threshold": 0.4,  # Lower threshold for movie reviews
                "preserve_whitespace": True,  # Consider spacing in symmetry
                "preserve_case": True,  # Case-sensitive matching
                "ignore_punctuation": True,  # Ignore punctuation for better pattern matching
            },
        ),
    )

    # Configure repetition detection rule
    # Uses case-insensitive matching with overlap allowed for thorough analysis
    repetition_rule = RepetitionRule(
        name="repetition_check",
        description="Detects repetitive patterns",
        config=RuleConfig(
            priority=RulePriority.MEDIUM,
            metadata={
                "pattern_type": "repeat",  # Look for repeated sequences
                "pattern_length": 3,  # Minimum pattern length
                "case_sensitive": False,  # Case-insensitive matching
                "allow_overlap": True,  # Allow overlapping patterns
            },
        ),
    )

    # Perform symmetry analysis
    symmetry_result = symmetry_rule._validate_impl(text)
    results["symmetry"] = {
        "passed": symmetry_result.passed,
        "message": symmetry_result.message,
        "metadata": symmetry_result.metadata,
    }

    # Perform repetition analysis
    repetition_result = repetition_rule._validate_impl(text)
    results["repetition"] = {
        "passed": repetition_result.passed,
        "message": repetition_result.message,
        "metadata": repetition_result.metadata,
    }

    return results


def main():
    """
    Main function demonstrating the integration of Pydantic, LangChain, and Sifaka.

    This function:
    1. Sets up the LLM configuration and model
    2. Creates a structured prompt for movie reviews
    3. Configures the LangChain pipeline with Pydantic validation
    4. Generates and analyzes movie reviews
    5. Performs pattern analysis on review summaries
    """
    # Load environment variables (ANTHROPIC_API_KEY required)
    load_dotenv()

    # Initialize the Anthropic model with configuration
    config = ModelConfig(
        api_key=os.environ.get("ANTHROPIC_API_KEY"),
        temperature=0.7,  # Balanced between creativity and consistency
        max_tokens=2000,  # Sufficient for detailed reviews
    )

    model = AnthropicProvider(
        model_name="claude-3-haiku-20240307",
        config=config,
    )

    # Create the Pydantic parser for structured output
    parser = PydanticOutputParser(pydantic_object=MovieReview)

    # Create a detailed prompt template with formatting instructions
    prompt = PromptTemplate(
        template="""
        Write a detailed movie review for the following movie: {movie_title}

        {format_instructions}

        CRITICAL SUMMARY LENGTH REQUIREMENT:
        The summary field MUST be EXACTLY 250 characters or less. Here's a template to follow:
        "[Movie Title] is a [genre] film about [brief plot]. Through [key elements], it explores [main theme]. With [notable aspects], the film [conclusion]."

        Example of appropriate length summary (exactly 250 characters):
        "The Godfather is a crime drama about the Corleone family's rise in the criminal underworld. Through masterful direction and performances, it explores themes of family and power. With iconic scenes and rich character development, the film defines the gangster genre."
        Character count: 250

        For Inception, here's an example of an appropriate length summary:
        "Inception is a mind-bending thriller about a team of dream infiltrators who must plant an idea in a CEO's mind. Through stunning visuals and layered storytelling, it explores the nature of reality and consciousness. With innovative effects and compelling performances, the film redefines the sci-fi genre."
        Character count: 249

        Additional requirements:
        1. Be objective in your assessment
        2. Provide specific examples for strengths and weaknesses
        3. Base the recommendation on clear criteria
        4. Follow the exact JSON format specified above
        5. Use proper JSON syntax with no trailing commas
        6. Ensure all text fields are properly escaped and formatted as valid JSON strings
        """,
        input_variables=["movie_title"],
        partial_variables={
            "format_instructions": parser.get_format_instructions(),
        },
    )

    # Create the LangChain pipeline
    llm = model.get_langchain_llm()
    chain = (
        {"movie_title": lambda x: x["movie_title"]}  # Extract movie title
        | prompt  # Format prompt
        | llm  # Generate review
        | (lambda x: x.content if hasattr(x, "content") else x)  # Extract content
    )

    # Configure Sifaka chain with Pydantic validation
    config = ChainConfig(
        output_parser=parser,
        critique=True,  # Enable output critique
    )

    # Wrap the chain with Sifaka for additional validation
    sifaka_chain = wrap_chain(chain=chain, config=config)

    # Example movies to review (classic films with distinct characteristics)
    movies = [
        "The Matrix",  # Sci-fi with philosophical themes
        "Inception",  # Complex narrative structure
        "The Shawshank Redemption",  # Character-driven drama
    ]

    # Generate and validate reviews for each movie
    for movie in movies:
        logger.info("\nGenerating review for: %s", movie)
        try:
            # Generate and validate the review
            result = sifaka_chain.run({"movie_title": movie})
            review = MovieReview.model_validate(result)

            # Log the structured review details
            logger.info("\nValidated Review:")
            logger.info("Title: %s (%d)", review.title, review.year)
            logger.info("Rating: %.1f/10", review.rating)
            logger.info("Genre: %s", ", ".join(review.genre))

            logger.info("\nStrengths:")
            for strength in review.strengths:
                logger.info("- %s", strength)

            logger.info("\nWeaknesses:")
            for weakness in review.weaknesses:
                logger.info("- %s", weakness)

            logger.info("\nSummary: %s", review.summary)
            logger.info("Recommended: %s", "Yes" if review.recommended else "No")

            # Perform and log pattern analysis on the summary
            pattern_results = analyze_text(review.summary)

            logger.info("\nSummary Pattern Analysis:")
            logger.info("Symmetry Analysis:")
            logger.info("- Score: %.2f", pattern_results["symmetry"]["metadata"]["symmetry_score"])
            logger.info("- Message: %s", pattern_results["symmetry"]["message"])

            logger.info("\nRepetition Analysis:")
            logger.info("- Message: %s", pattern_results["repetition"]["message"])
            if "patterns" in pattern_results["repetition"]["metadata"]:
                logger.info("- Notable patterns:")
                patterns = pattern_results["repetition"]["metadata"]["patterns"]
                if isinstance(patterns, list) and len(patterns) > 0:
                    for pattern in patterns[:3]:  # Show top 3 patterns
                        logger.info("  * %s", pattern)

        except Exception as e:
            logger.error("Failed to generate or validate review: %s", str(e))


if __name__ == "__main__":
    main()
